from flask import Flask, request, jsonify, redirect
import sqlite3
import random
import string

app = Flask(__name__)

# Create a SQLite database and connect to it
conn = sqlite3.connect('url_shortener.db')
cursor = conn.cursor()

# Create the URL mapping table if it doesn't exist
cursor.execute('''
    CREATE TABLE IF NOT EXISTS url_mappings (
        id INTEGER PRIMARY KEY,
        long_url TEXT NOT NULL,
        short_url TEXT NOT NULL UNIQUE
    )
''')
conn.commit()

# Function to generate a random short URL
def generate_short_url():
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(6))

# API endpoint to shorten a URL
@app.route('/shorten', methods=['POST'])
def shorten_url():
    try:
        long_url = request.json['long_url']
        cursor.execute('SELECT short_url FROM url_mappings WHERE long_url = ?', (long_url,))
        result = cursor.fetchone()

        if result:
            return jsonify({'short_url': result[0]})
        else:
            while True:
                short_url = generate_short_url()
                try:
                    cursor.execute('INSERT INTO url_mappings (long_url, short_url) VALUES (?, ?)', (long_url, short_url))
                    conn.commit()
                    return jsonify({'short_url': short_url})
                except sqlite3.IntegrityError:
                    pass
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# API endpoint to expand a short URL
@app.route('/expand/<short_url>', methods=['GET'])
def expand_url(short_url):
    try:
        cursor.execute('SELECT long_url FROM url_mappings WHERE short_url = ?', (short_url,))
        result = cursor.fetchone()
        if result:
            return redirect(result[0])
        else:
            return jsonify({'error': 'Short URL not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
